{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Postee is a simple message routing application that receives input messages through a webhook interface, and can take enforce actions using predefined outputs via integrations.</p> <p>Primary use of Postee is to act as a message relay and notification service that integrates with a variety of third-party services. Postee can also be used for sending vulnerability scan results or audit alerts from Khulnasoft Platform to collaboration systems.</p> <p>In addition, Postee can also be used to enforce pre-defined behaviours that can orchestrate actions based on input messages as triggers.</p> <p></p>"},{"location":"actions/","title":"Actions","text":""},{"location":"actions/#motivation","title":"Motivation","text":"<p>Proper alert management can help security practitioners make informed decisions about their codebase. However, security alerts can cause fatigue if acting on them isn\u2019t possible. Postee, an open source security alert management tool, helps mitigate some of those concerns. It enables teams to define routes and rules by which alerts are handled and redirected to</p>"},{"location":"actions/#user-stories","title":"User Stories","text":"<p>In a typical Postee setup, users can configure the tool to receive events from a variety of sources over a webhook. This allows for ease of use in existing environments. Furthermore, users can configure Postee to process these incoming events and, based on logic defined via Rego rules, send them to different actions.</p> <p>As a Postee User</p> <ul> <li> <p>I want, to be able to remove a vulnerable image from my cluster upon a Trivy scan So that, I can keep such images unavailable for deployment.</p> </li> <li> <p>I want, to ship Tracee security notification logs from my node when events are detected  So that, I can build a timelog for forensics purposes.</p> </li> <li> <p>I want, to be able to add labels to my deployments when Starboard detects a vulnerable image in my cluster  So that, I can effectively tag my resources.</p> </li> </ul> <p></p> <p>Actions are remote services that messages should be sent to. Each action has two mandatory fields, which are 'name' and 'type'.</p> Key Description Values Example name Unique name of the action. This name is used in the route definition. Any string teams-action type The type of the action You can choose from the following types: email, jira, slack, teams, webhook, splunk, serviceNow email <p>Tip</p> <p>Depending on the 'type', additional parameters are required.</p>"},{"location":"actions/#jira","title":"Jira","text":"<p>Follow these steps to set up JIRA integration:</p> <ol> <li>Get a new token for user:<ul> <li>Login to Jira Cloud.   Go to the user profile API tokens (JIRA Cloud users can find it here).</li> <li>Click on the Create API Token. A new API token for the user is created.</li> <li>Login to Jira Server/Data center   Select your profile picture at top right of the screen, then choose  Settings &gt; Personal Access Tokens. Select Create token. Give your new token a name. Optionally, for security reasons, you can set your token to automatically expire after a set number of days. Click Create. A new PAT for the user is created.</li> </ul> </li> <li>Fill jira action in cfg.yaml:<ul> <li>Jira Cloud:<ul> <li>User: your email.</li> <li>Password: your API token.</li> </ul> </li> <li>Jira Server/Data center:<ul> <li>User: your UserName.</li> <li>Password: your Password.\\   or</li> <li>Token: your Personal Access Tokens.</li> </ul> </li> </ul> </li> </ol> Key Description Values Required url Jira project url Yes project-key The JIRA project key Yes user Jira user. Use email for Jira Cloud and UserName for Jira Server/Data Center Yes password User's password. API token can also be used for Cloud Jira instances. No token User's Personal Access Token. Used only for Jira Server/Data Center No board JIRA board key No priority ticket priority, e.g., High No assignee comma separated list of users (emails) that will be assigned to ticket, e.g., [\"john@yahoo.com\"]. To assign a ticket to the Application Owner email address (as defined in Khulnasoft Application Scope, owner email field), specify [\"&lt;%application_scope_owner%&gt;\"] as the assignee value No issuetype issue type, e.g., Bug No labels comma separated list of labels that will be assigned to ticket, e.g., [\"label1\", \"label2\"] No sprint Sprint name, e.g., \"3.5 Sprint 8\" No <p>For Jira you can also specify custom fields that will be populated with values. Use the <code>unknowns</code> parameter in cfg.yaml for custom fields. Under the <code>unknowns</code> parameter, specify the list of fields names to provide value for. Field name can contains spaces.</p> <p>Possible options for getting the field name:</p> Get field name from Jira UI <ol> <li>Move to your jira.</li> <li>Navigate to Settings() &gt; Issues &gt; Custom fields under the Fields section: </li> <li>Click on the required field. </li> <li>Get value from Name field.</li> </ol> Get field name from Jira REST API <ol> <li>Get all Jira fields according to instructions</li> <li>Find needed field:</li> </ol> <p><pre><code> ...\n     \"id\": \"customfield_10014\",\n     \"key\": \"customfield_10014\",\n     \"name\": \"Epic Link\",\n     \"untranslatedName\": \"Epic Link\",\n     \"custom\": true,\n     \"orderable\": true,\n     \"navigable\": true,\n     \"searchable\": true,\n     \"clauseNames\": [\n       \"cf[10014]\",\n       \"Epic Link\"\n     ],\n     \"schema\": {\n       \"type\": \"any\",\n       \"custom\": \"com.pyxis.greenhopper.jira:gh-epic-link\",\n       \"customId\": 10014\n     }\n   },\n ...\n</code></pre> 3. Get value from Name field.</p> <p>Example of using the <code>unknowns</code> parameter in the cfg.yaml file:</p> <pre><code>unknowns:\n     Epic Link: \"K8S-1\"\n</code></pre> <p>Tip</p> <p>You can add \"-numeric-field\", \"-multiple-value\", \"multiple-line-text-field\", \"-date-time-picker\" and \"-field-url\" as suffix to the custom field name, to specify what is the field type.</p> <p>For example:   <pre><code>unknowns:\n     mycustom: \"this is a text custom field\"\n     mycustom-numeric-field: 123\n     mycustom-multiple-value: 1,2,3\n     mycustom-multiple-line-text-field: \"text \\n moretext\"\n     mycustom-date-time-picker: 2014-04-11T12:14:26.880+0400\n     mycustom-url: https://tour.golang.org/moretypes/7\n</code></pre></p>"},{"location":"actions/#email","title":"Email","text":"Key Description Values Required use-mx Whether to send the email as an SMTP server or a client. Specify 'true' if you would like to send email as an smtp server, in this case you don't need to provide user, password, host and port. true, false user if auth supported. User name (usually email address) No password if auth supported. Password No host SMTP host name Yes port SMTP port Yes sender Sender's email address Yes recipients Recipients (array of comma separated emails), e.g. [\"john@yahoo.com\"]. To send the email to the Application Owner email address (as defined in Khulnasoft Application Scope, owner email field), specify [\"&lt;%application_scope_owner%&gt;\"] as the recipients value Yes"},{"location":"actions/#slack","title":"Slack","text":"<p>Getting the Slack webhooks Create a Slack Custom App.</p> <p>Copy webhook url to the Postee config</p> Key Description Values url Slack WebHook URL (includes the access key)"},{"location":"actions/#ms-teams","title":"MS Teams","text":"<p>Open your Microsoft Teams client. Click on the \"...\" near the channel you would like to send notifications to.</p> <p>Choose \"Connectors\". The connectors window will open. Look for the \"Incoming Webhook\" connector (it is under the \"All\" category).</p> <p>Click \"Add\" near the Incoming Webhook connector. Click \"Add\" again. Provide a name and click \"Create\".</p> <p>You will be provided with a URL address. Copy this URL and put it in the cfg.yaml.</p> Key Description Values url MS Teams WebHook URL"},{"location":"actions/#splunk","title":"Splunk","text":"<p>You will need to care about an HTTP Event Collector in Splunk Enterprise or Splunk Cloud.</p> <p>Tip</p> <p>This can usually be found in the Splunk console under \"Settings -&gt; Data Inputs -&gt; HTTP Event Collector -&gt; Add New\".</p> <p>Once you create an HTTP Event Collector you will receive a token. You should provide this token, together with the Splunk HTTP Collector URL, as part of the cfg.yaml settings.</p> Key Description Values Required token The Splunk HTTP event collector token Yes url URL to Splunk HTTP event collector (e.g. http://server:8088) Yes size-limit Maximum scan length, in bytes. Default: 10000 10000"},{"location":"actions/#servicenow","title":"ServiceNow","text":"Key Description Values Required user ServiceNow user name Yes password User API key / password Yes instance Name of ServiceNow Instance (usually the XXX at XXX.servicenow.com) Yes board ServiceNow board name to open tickets on. Default is \"incident\""},{"location":"actions/#nexus-iq","title":"Nexus IQ","text":"Key Description Values Required user Nexus IQ user name Yes password Nexus IQ password Yes url Url of Nexus IQ server Yes organization-id Organization UID like \"222de33e8005408a844c12eab952c9b0\" Yes"},{"location":"actions/#dependency-track","title":"Dependency Track","text":"Key Description Values Required url Url of Dependency Track Yes dependency-track-api-key API key of Dependency Track Yes"},{"location":"actions/#opsgenie","title":"OpsGenie","text":"Set up OpsGenie and get a token <ol> <li>Go to your Opsgenie and select Teams from menu.</li> <li>Select your team to access your team dashboard.</li> <li>Select Integrations from left navigation.</li> <li>Select Add Integration.</li> <li>Select API Integration.</li> <li>Copy <code>API Key</code>.</li> <li>When done with all configurations, select Save Integration to enable the integration.</li> </ol> <p>See more details here: Set up an integrated tool for Opsgenie.</p> <p>Caution</p> <p>Postee requires an API key from an API integration. This can be added under the Settings -&gt; Integrations tab. Or it can under a team's Integrations tab.</p> <p>If the integration assigns an alert to a team, it can only create alerts for that team.</p> <p>An API key from the <code>API Key Management</code> tab will produce an HTTP 403 error. This API Key is valid but cannot create alerts as it lacks necessary permissions. </p> Key Description Values Required token an API key from an API integration Yes user Display name of the request owner. No assignee Comma separated list of users that the alert will be routed to send notifications No recipients Comma separated list of users that the alert will become visible to without sending any notification No priority Specify the alert priority. Default is \"P3\" \"P1\" \"P2\" \"P3\" \"P4\" \"P5\" No tags Comma separated list of the alert tags. No alias Client-defined identifier of the alert. No entity Entity field of the alert that is generally used to specify which domain alert is related to. No"},{"location":"actions/#exec","title":"Exec","text":"Option Usage Required env custom environment variables to be exposed in the shell of the executing script No input-file custom shell script to executed Yes exec-script inline shell script executed Yes <p>The Exec Action also internally exposes the <code>$POSTEE_EVENT</code> environment variable with the input event that triggered the action. This can be helpful in situations where the event itself contains useful information.</p> <p>Below is an example of using <code>$POSTEE_EVENT</code>. It uses the inline exec-script script:</p> <p></p>"},{"location":"actions/#http","title":"HTTP","text":"Option Usage Required URL URL of the remote server Yes Method e.g., GET, POST Yes Headers custom headers to send No Timeout custom timeout for HTTP call No Bodyfile input file for HTTP post body No"},{"location":"actions/#kubernetes","title":"Kubernetes","text":"Option Usage Required kube-namespace Kubernetes namespace to use. Yes kube-config-file Path to .kubeconfig file Yes kube-label-selector if specifying labels or annotations. Yes kube-actions key-value pair of labels and annotationsLabels must be added via \"labels\" key and Annotations via \"annotations\". No"},{"location":"actions/#docker","title":"Docker","text":"Option Usage Required docker-image-name Image name of the docker image. Yes docker-cmd Command to run inside the docker image. Yes docker-env Environment variables to set in the container. No docker-network Connect the action container to the specified network. No docker-volume-mounts *Volume mounts present inside the container. * If you have specified volume mounts, you also need to pass them through into the postee docker container No <p>Note</p> <p>When running Postee in a Docker container, it is required to mount the Docker socket within the Postee container to be able to spin up Docker Action container instances. This can be done as follows:   <pre><code>docker run --rm --name=postee --group-add $(stat -c '%g' /var/run/docker.sock) -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/cfg.yaml:/config/cfg.yaml  -e POSTEE_CFG=/config/cfg.yaml -e POSTEE_HTTP=0.0.0.0:8084     -e POSTEE_HTTPS=0.0.0.0:8444     -p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre></p> <p>Tip</p> <p>If you have specified volume mounts for a docker container and use Postee in a docker container as well, remember to mount them within the Postee container as well:   <pre><code>docker run --rm --name=postee --group-add $(stat -c '%g' /var/run/docker.sock) -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/cfg.yaml:/config/cfg.yaml  -v /my/custom/volume:/my/custom/volume -e POSTEE_CFG=/config/cfg.yaml -e POSTEE_HTTP=0.0.0.0:8084     -e POSTEE_HTTPS=0.0.0.0:8444     -p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre></p>"},{"location":"actions/#generic-webhook","title":"Generic Webhook","text":"Key Description Values url Webhook URL timeout Webhook timeout <p>Tip</p> <p>The generic webhook action can be used for sending Postee output to any endpoint that can receive a request. You can find some interesting examples as part of the Postee Blueprints</p>"},{"location":"actions/#defectdojo","title":"DefectDojo","text":"<p>DefectDojo is a DevOpsSec and vulnerability management tool. When sending a Trivy operator report, the API expects us to send a multipart/form-data POST request to the API endpoint. Authentication is done through an API token that can be easily provided by either environment variables or K8s secrets.</p> <p>At the time of writing, Postee doesn't provide any native action module targeting the DefectDojo API. Instead the solution is to apply a shell script through an EXEC action that consumes the JSON output of a custom made REGO template that mangles the JSON payload received from a Trivy operator instance.</p> <p>The REGO template will be use-case specific because the metadata added heavily depends on the users setup and hierarchical structure inside the user's DefectDojo instance.</p> <p>The resulting JSON data puts the Trivy report under the <code>report</code> key and derived meta data under the <code>metadata</code> key. The idea behind this is to provide a data structure that will make it easy to develop a more generic shell script. In a subsequent step an EXEC module is called consuming the resulting JSON structure from an environment variable called <code>POSTEE_EVENT</code>. For more information see the EXEC action.</p>"},{"location":"actions/#implementation","title":"Implementation","text":"<ol> <li>DefectDojo - create an non-interactive API user and an API token</li> <li>Postee - deploy the token as <code>DEFECTDOJO_API_TOKEN</code> environment variable</li> <li>Postee - deploy the base URL for DefectDojo using <code>DEFECTDOJO_URL</code></li> <li>Mount the example shell script into the container</li> <li>Mount the example rego template into the container</li> <li>Update your configuration according to the example provided</li> <li>Validate the setup by sending an example report in JSON format using the following shell command <code>curl -X POST -H \"Content-Type: application/json\" -d @trivy-operator-report.json http://postee:8082</code></li> </ol>"},{"location":"advanced/","title":"Advanced","text":"<p>This page covers some advanced topics that the experienced users of Postee might like to try. </p>"},{"location":"advanced/#using-environment-variables-in-postee-configuration-file","title":"Using environment variables in Postee Configuration File","text":"<p>Postee supports use of environment variables for Output fields: User, Password and Token. </p> <p>Add prefix <code>$</code> to the environment variable name in the configuration file, for example: <pre><code>actions:\n- name: my-jira   \n  type: jira     \n  enable: true\n  user: $JIRA_USERNAME\n  token: $JIRA_SERVER_TOKEN         \n</code></pre></p>"},{"location":"advanced/#helm","title":"Helm","text":"<p>When installing Postee on Kubernetes with Helm, you can provide environment variables from Kubernetes secrets. Given there is a Secret containing sensitive information: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  JIRA_USERNAME: secret-username\n  JIRA_SERVER_TOKEN: secret-token\n</code></pre></p> <p>You can refer to this secret and use its data in Postee by specifying its name in the Helm values: <pre><code>envFrom:\n  - mysecret\n</code></pre></p>"},{"location":"advanced/#customizing-templates","title":"Customizing Templates","text":"<p>Postee loads bundle of templates from <code>rego-templates</code> folder. This folder includes several templates shipped with Postee, which can be used out of the box. You can add additional custom templates by placing Rego file under the 'rego-templates' directory.</p> <p>To create your own template, you should create a new file under the 'rego-templates' directory, and use the Rego language for the actual template code.</p> <p>Message payload is referenced as <code>input</code> when template is rendered. The <code>result</code> variable should be used to store the output message, which is the result of the template formatting.</p> <p>The following variables should be defined in the custom Rego template.</p> Key Description Type result message body Can be either string or json title message title string aggregation_pkg reference to package used to aggregate messages (when aggregate-message-timeout or aggregate-message-number options are used). If it's missed then aggregation feature is not supported valid rego package <p>So the simplest example of Rego template would look like: <pre><code>package example.vuls.html\n\ntitle:=\"Vulnerabilities are found\"\nresult:=sprintf(\"Vulnerabilities are found while scanning of image: &lt;i&gt;%s&lt;/i&gt;\", [input.image])\n</code></pre></p> <p>Two examples are shipped with the app. One produces output for slack integration and another one builds html output which can be used across several integrations. These example can be used as starting point for message customization</p>"},{"location":"advanced/#data-persistence","title":"Data Persistence","text":"<p>The Postee container uses BoltDB to store information about previously scanned images. This is used to prevent resending messages that were already sent before. The size of the database can grow over time. Every image that is saved in the database uses 20K of storage.</p> <p>Postee supports \u2018PATH_TO_DB\u2019 environment variable to change the database directory. To use, set the \u2018PATH_TO_DB\u2019 environment variable to point to the database file, for example: PATH_TO_DB=\"./database/webhook.db\". </p> <p>By default, the directory for the database file is \u201c/server/database/webhook.db\u201d.</p> <p>Tip</p> <pre><code>If you would like to persist the database file between restarts of the Postee container, then you should use a persistent storage option to mount the \"/server/database\" directory of the container.\n</code></pre> <p>The \"deploy/kubernetes\" directory in this project contains an example deployment that includes a basic Host Persistency.</p>"},{"location":"config/","title":"Config File","text":"<p>When Postee receives a message it will process it based on routing rules and send it to the appropriate target. How does it know how to do that? Well, this information is defined in Postee's configuration file, cfg.yaml, which contains the following definitions:</p> <ol> <li>General settings</li> <li>Routes</li> <li>Templates</li> <li>Actions</li> </ol> <p>These sections will be described in detail as we proceed through the documentation.</p>"},{"location":"controller-runner/","title":"Controller Runner Mode","text":""},{"location":"controller-runner/#introduction","title":"Introduction","text":"<p>Postee can also be run in Controller/Runner mode. The idea is to decouple enforcement from execution, if applicable.</p>"},{"location":"controller-runner/#scenario","title":"Scenario","text":"<p>In the following scenario, consider two services: A and B. In the case of Service A, a Trivy scan is run and results of the scan result are sent to Postee for executing Actions upon.</p> <p>In the case of Service B, a Tracee container is constantly monitoring for malicious activity that happens on the host. When a Tracee finding is observed, it is sent to a local Postee Runner. This Postee Runner has the ability to locally execute a pre-defined Postee Action.</p> <p></p>"},{"location":"controller-runner/#configuration","title":"Configuration","text":""},{"location":"controller-runner/#run-postee-in-controller-mode","title":"Run Postee in Controller mode:","text":"<pre><code>postee --cfgfile=./cfg-controller-runner.yaml --controller-mode --controller-ca-root=\"./rootCA.pem\" --controller-tls-cert=\"./server-cert.pem\" --controller-tls-key=\"./server-key.pem\" --controller-seed-file=\"./seed.txt\"\n</code></pre> Option Required Description controller-mode true Enable Postee to run as a Controller controller-ca-root false TLS CA Root Certificate for Controller controller-tls-cert false TLS Certificate for Controller controller-tls-key false TLS Key for Controller controller-seed-file false Seed file for Controller Example Controller/Runner Configuration <pre><code>name: Postee Controller Runner Demo\n\nroutes:\n- name: controller-only-route\n  input: contains(input.image, \"alpine\")\n  actions: [my-http-post-from-controller]\n  template: raw-json\n\n- name: runner-only-route\n  input: contains(input.SigMetadata.ID, \"TRC-1\")\n  serialize-actions: true\n  actions: [my-exec-from-runner, my-http-post-from-runner]\n  template: raw-json\n\n- name: controller-runner-route\n  input: contains(input.SigMetadata.ID, \"TRC-2\")\n  actions: [my-exec-from-runner, my-http-post-from-runner, my-http-post-from-controller]\n  template: raw-json\n\ntemplates:\n- name: raw-json\n  rego-package: postee.rawmessage.json\n\nactions:\n- name: stdout\n  type: stdout\n  enable: true\n\n- name: my-http-post-from-controller\n  type: http\n  enable: true\n  url: \"https://webhook.site/&lt;uuid&gt;\"\n  method: POST\n  headers:\n    \"Foo\": [ \"bar\" ]\n  timeout: 10s\n  body-content: |\n    This is an example of a inline body\n    Input Image: event.input.image\n\n- name: my-exec-from-runner\n  runs-on: \"postee-runner-1\"\n  type: exec\n  enable: true\n  env: [\"MY_ENV_VAR=foo_bar_baz\", \"MY_KEY=secret\"]\n  exec-script: |\n    #!/bin/sh\n    echo $POSTEE_EVENT\n    echo \"this is hello from postee\"\n\n- name: my-http-post-from-runner\n  runs-on: \"postee-runner-1\"\n  type: http\n  enable: true\n  url: \"https://webhook.site/&lt;uuid&gt;\"\n  method: POST\n  body-content: |\n    This is an another example of a inline body\n    Event ID: event.input.SigMetadata.ID\n</code></pre> <p>The only notable change in the configuration as defined is of the Actions that can run on Runners. Observe the <code>runs-on</code> clause below. <pre><code>- name: my-exec-from-runner\n  runs-on: \"postee-runner-1\"\n  type: exec\n  enable: true\n  exec-script: |\n    #!/bin/sh\n    echo $POSTEE_EVENT\n    echo \"this is hello from postee\"\n</code></pre></p> <p>In this case this particular Action will run on Postee Runner that identifies itself as <code>postee-runner-1</code></p>"},{"location":"controller-runner/#run-postee-in-runner-mode","title":"Run Postee in Runner mode:","text":"<pre><code>postee --controller-url=\"nats://0.0.0.0:4222\" --runner-ca-cert=\"./rootCA.pem\" --runner-tls-cert=\"./runner-cert.pem\" --runner-tls-key=\"./runner-key.pem\" --runner-seed-file=\"./seed.txt\", --runner-name=\"postee-runner-1\"  --url=0.0.0.0:9082 --tls=0.0.0.0:9445\n</code></pre> Option Required Description controller-url true The URL to the Postee Controller runner-name true The Name of the Runner, as defined in configuration YAML runner-ca-root false TLS Root CA Certificate for Runner runner-tls-cert false TLS Certificate for Runner runner-tls-key false TLS Key for Runner runner-seed-file false Seed file for Runner"},{"location":"controller-runner/#secured-controllerrunner-channel","title":"Secured Controller/Runner Channel","text":"<p>The communication channel between Controller and Runner can be optionally secured with TLS and be Authentication (AuthN). </p> <p>TLS can be enabled by passing the TLS cert and key through the optional <code>--controller-tls-cert</code> and <code>--controller-tls-key</code> flags for Controller and <code>--runner-tls-cert</code> and <code>--runner-tls-key</code> flags for Runner.</p> <p>AuthN can be enabled by passing the NATS Seed File. Postee uses NKeys, a public-key signature system based on Ed25519. </p> <p>A seed file should be treated as a secret. It can be passed to the Controller via the <code>--controller-seed-file</code> and the Runner via <code>--runner-seed-file</code>.</p> <p>This can be helpful in situations where Postee Config contains secrets that are configured in an Action that runs on a Runner. </p>"},{"location":"controller-runner/#walkthrough","title":"Walkthrough","text":"<p>In the case of Tracee reporting a malicious finding, the Action might only make sense to run locally within the same environment where Tracee reported from. For instance, in the case of a Postee Action to kill a process reported within the malicious finding, the process will only exist on the host where Tracee reported from. Therefore, the need for a localized Postee that can handle this arises.</p> <p>Postee Runners can automatically bootstrap themselves upon startup, given the address of the Postee Controller. They only receive the relevant config info from the Postee Controller for the Actions and Routes they are responsible for. This helps by limiting the spread of secrets in your configuration to only those Runners where they are needed. If your deployment uses Actions where secrets are required, we recommend you run these Actions at the Controller level.</p> <p>The only Actions that a Postee Runner should run are Actions that are context/environment specific. A few examples (but not limited to) are: Killing a local process, Shipping local logs on host to a remote endpoint, etc.</p>"},{"location":"controller-runner/#additional-info","title":"Additional Info","text":"<p>Postee Runners and Controllers are no different from a normal instance of vanilla Postee. Therefore, no changes to the producers are required to use this functionality.</p> <p>All events received by Postee Runners are reported upstream to the Controller. This has two benefits:</p> <ol> <li>Executions and Events received by the Runners can be monitored at a central level (Controller).</li> <li>Mixing of Runner and Controller Actions within a single Route, for ease of usage.</li> </ol> <p>Mixing of Runner and Controller Actions can be explained with a following sample configuration: <pre><code>- name: controller-only-route\n  input: contains(input.image, \"alpine\")\n  actions: [my-slack-message-from-controller]\n  template: raw-json\n\n- name: runner-only-route\n  input: contains(input.SigMetadata.ID, \"TRC-1\")\n  serialize-actions: true\n  actions: [my-exec-from-runner, my-http-post-from-runner]\n  template: raw-json\n\n- name: controller-runner-route\n  input: contains(input.SigMetadata.ID, \"TRC-2\")\n  serialize-actions: true\n  actions: [my-exec-from-runner, my-http-post-from-runner, my-jira-ticket-from-controller]\n  template: raw-json\n</code></pre></p> <p>In this sample configuration, we have three routes. One that solely executes on the Controller, another that solely executes on the Runner and a Mixed route.</p> <p>In the case of the Mixed route, the first two Actions are run on the Runner. These Actions are run locally as they might require environment specific things to run, as discussed above. The third Action is run from a Controller because of security reasons to not distribute secrets to a Runner. </p>"},{"location":"controller-runner/#a-quick-note-on-serialization","title":"A quick note on Serialization","text":"<p>The option of <code>serialize-actions</code> works as expected and guarantees true serialization for execution of Actions in the case of Controller only and Runner only routes. But for the case of Mixed routes (as described above) where executions can run on both Controller and Runner, this serialization cannot be strongly guaranteed due to the difference of execution environments (Runner and Controller).</p>"},{"location":"demo/","title":"Demo","text":"<p>In this demo, we\u2019ll walk through a scenario in which a user wants to act on a security event received from Tracee, an open source runtime security tool. In this scenario, the user will set up the Postee Exec Action to save logs for forensic purposes and then use the Postee HTTP Action to ship the saved logs to a remote server.</p> <p>In this case, the incoming security event from Tracee is received by Postee and evaluated by the following route YAML definition:</p> <p></p> <p>As seen above, the route has a Rego rule that evaluates the input to contain a certain signature ID, TRC-2, which represents anti-debugging activity. In addition, if the input is matched, the output is triggered.</p>"},{"location":"demo/#exec-action","title":"Exec Action","text":"<p>In this case, we call the Exec Action first and then the HTTP Action. They are defined as the following:</p> <p>The Exec Action can take in the following parameters:</p> Option Usage env Optional, custom environment variables to be exposed in the shell of the executing script input-file Required, custom shell script to executed exec-script Required, inline shell script executed <p>The Exec Action also internally exposes the <code>$POSTEE_EVENT</code> environment variable with the input event that triggered the action. This can be helpful in situations where the event itself contains useful information.</p> <p>Below is an example of using <code>$POSTEE_EVENT</code>. It uses the inline exec-script script:</p> <p></p> <p>As you can see, we capture the incoming Postee event and write this event to the Tracee event log for forensic purposes.</p>"},{"location":"demo/#http-action","title":"HTTP Action","text":"<p>Finally, we can configure the Postee HTTP Post Action to ship the captured event logs via our HTTP Action to our remote server.</p> <p></p> Option Usage URL Required, URL of the remote server Method Required, e.g., GET, POST Headers Optional, custom headers to send Timeout Optional, custom timeout for HTTP call Bodyfile Optional, input file for HTTP post body <p>To run Postee in the container, we can invoke the Postee Docker container:</p> <pre><code>docker run --rm --name=postee \\\n-v &lt;path-to-cfg&gt;:/config/cfg-actions.yaml  \\\n-e POSTEE_CFG=/config/cfg-actions.yaml \\\n-e POSTEE_HTTP=0.0.0.0:8084  \\\n-e POSTEE_HTTPS=0.0.0.0:8444  \\\n-p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#kubernetes","title":"Kubernetes","text":"<p>Due to a limitation in how persistent volumes are handled in EKS, we have to ensure that both components sharing DB and CFG volumes are deployed to the same physical K8s node. This can be achieved by setting a <code>podAffinity</code> in the <code>values.yaml</code> file.</p> <pre><code># BUG: postee-0 und posteeui both need access to the same PVC (database) so we need to ensure both run on the same node\naffinity:\n  podAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchExpressions:\n        - key: app.kubernetes.io/instance\n          operator: In\n          values:\n          - postee\n      topologyKey: kubernetes.io/hostname\n</code></pre>"},{"location":"examples/","title":"Simple Examples","text":"<p>Here are some Postee configuration samples to showcase a variety of use cases.</p> Forward all \"Block\" audit events <pre><code>name: myserver\nkhulnasoft-server: https://myserver.com\nmax-db-size: 1000MB\ndelete-old-data: 100\ndb-verify-interval: 1\n\nroutes:\n- name: team-drift\n  input: input.level = \"block\"\n  actions: [my-teams]\n  template: raw-html\n\nactions:\n- name: my-teams\n  type: teams\n  enable: true\n  url: https://outlook.office.com/webhook/&lt;replace&gt;\n\ntemplates:\n- name: raw-html\n  rego-package:  postee.rawmessage.html\n</code></pre> Forward Critical vulnerabilities <pre><code># This example will forward events of images with critical vulnerabilities to MS Teams.\n# Note that duplicate events of same image will be ignored for 30 days.\n\nname: myserver\nkhulnasoft-server: https://myserver.com\nmax-db-size: 1000MB\ndelete-old-data: 100\ndb-verify-interval: 1\n\nroutes:\n- name: team-critical-vul\n  input: input.vulnerability_summary.critical &gt; 0\n  actions: [my-teams]\n  template: raw-html\n  plugins:\n  unique-message-props: [\"digest\",\"image\",\"registry\", \"vulnerability_summary.high\", \"vulnerability_summary.medium\", \"vulnerability_summary_low\"]\n  unique-message-timeout: 30d\n\nactions:\n- name: my-teams\n  type: teams\n  enable: true\n  url: https://outlook.office.com/webhook/&lt;replace&gt;\n\ntemplates:\n- name: raw-html\n  rego-package:  postee.rawmessage.html\n</code></pre> Forward Drift events <pre><code># This example will forward events of Drift Prevention to MS Teams.\n\nname: myserver\nkhulnasoft-server: https://myserver.com\nmax-db-size: 1000MB       #  Max size of DB. &lt;numbers&gt;&lt;unit suffix&gt; pattern is used, such as \"300MB\" or \"1GB\". If empty or 0 then unlimited\ndelete-old-data: 100    # delete data older than N day(s).  If empty then we do not delete.\ndb-verify-interval: 1   # hours. an Interval between tests of DB. Default: 1 hour\n\nroutes:\n- name: team-drift\n  input: contains(input.control, \"Drift\")\n  actions: [my-teams]\n  template: raw-html\n\nactions:\n- name: my-teams\n  type: teams\n  enable: true\n  url: https://outlook.office.com/webhook/&lt;replace&gt;\n\ntemplates:\n- name: raw-html                        #  Raw message json\n  rego-package:  postee.rawmessage.html #  HTLM template REGO package\n</code></pre> Add Kubernetes Labels and Annotations <pre><code>name: tenant\nkhulnasoft-server:\nmax-db-size: 1000MB\ndb-verify-interval: 1\n\nroutes:\n- name: stdout\n  actions: [ stdout ]\n  template: raw-json\n\n- name: actions-route\n  input: contains(input.SigMetadata.ID, \"TRC-2\")\n  actions: [my-k8s]\n  template: raw-json\n\ntemplates:\n- name: raw-json\n  rego-package: postee.rawmessage.json\n\nactions:\n- name: stdout\n  type: stdout\n  enable: true\n\n- name: my-k8s\n  type: kubernetes\n  enable: true\n  kube-namespace: \"default\"\n  kube-config-file: \"/path/to/kubeconfig\"\n  kube-label-selector: \"app=nginx-app\"\n  kube-actions:\n  labels:\n  foo-label: \"bar-value\"\n  bar-label: event.input.SigMetadata.ID\n  annotations:\n  foo-annotation: \"bar-value\"\n  bar-annotation: event.input.SigMetadata.ID\n</code></pre> Run ad-hoc docker image <pre><code>name: tenant\nkhulnasoft-server:\nmax-db-size: 1000MB\ndb-verify-interval: 1\n\nroutes:\n- name: stdout\n  actions: [ stdout ]\n  template: raw-json\n\n- name: actions-route\n  input: contains(input.SigMetadata.ID, \"TRC-2\")\n  actions: [stop-vulnerable-pod]\n  template: raw-json\n\ntemplates:\n- name: raw-json\n  rego-package: postee.rawmessage.json\n\nactions:\n- name: stdout\n  type: stdout\n  enable: true\n\n- name: stop-vulnerable-pod\n  type: docker\n  enable: true\n  docker-image-name: \"bitnami/kubectl:latest\"                          \n  docker-cmd: [\"delete\", \"pod\", event.input.SigMetadata.hostname]\n  docker-network: \"host\"\n  docker-volume-mounts:\n  \"path/to/.kube/config\": \"/.kube/config\"\n</code></pre> Collect and send logs <pre><code>name: tenant\nkhulnasoft-server: localhost\nmax-db-size: 1000MB\ndb-verify-interval: 1\n\nroutes:\n- name: stdout\n  actions: [ stdout ]\n  template: raw-json\n\n- name: actions-route\n  input: contains(input.SigMetadata.ID, \"TRC-2\")\n  serialize-actions: true\n  actions: [my-exec, my-http-post-file, my-http-post-content]\n  template: raw-json\n\ntemplates:\n- name: raw-json\n  rego-package: postee.rawmessage.json\n\nactions:\n- name: stdout\n  type: stdout\n  enable: true\n\n- name: my-exec\n  type: exec\n  enable: true\n  env: [\"MY_ENV_VAR=foo_bar_baz\", \"MY_KEY=secret\"]\n  exec-script: |\n  #!/bin/sh\n  echo $POSTEE_EVENT &gt;&gt; /tmp/postee.event.logs\n\n- name: my-http-post-file\n  type: http\n  enable: true\n  url: \"https://my-fancy-url.com\"\n  method: POST\n  body-file: /tmp/postee.event.logs\n\n- name: my-http-post-content\n  type: http\n  enable: true\n  url: \"https://my-fancy-url.com\"\n  method: POST\n  headers:\n  \"Foo\": [ \"bar\" ]\n  \"Haz\": [ \"baz\" ]\n  timeout: 10s\n  body-content: |\n  This is an example of a inline body\n  Event ID: event.input.Signature.ID   \n</code></pre>"},{"location":"improvements/","title":"Improvements","text":"<p>Postee like any other software isn't perfect and as the writing of this document can be improved in the following areas:</p>"},{"location":"improvements/#ui","title":"UI","text":"<p>This is an improvement that would benefit not just new users of Postee but also add ease of use for existing users to configure Postee on the fly with drag and drop-'ing of components to configure Postee.</p> <p></p> <p>The above is an example of a User Interface that Postee could have where the blocks (Trivy, AWS Security Hub and Slack) are dragged and dropped into the view and connected as needed. This would translate into a Postee configuration file being written to disk.</p>"},{"location":"improvements/#alternate-policy-language","title":"Alternate Policy language","text":"<p>Today Postee supports Rego as the primary language for policy evaluation. While Rego is purposely suited for being a policy language, it might be challenging to learn for new users and feel comfortable in. </p> <p>Therefore, having an alternate policy language to write rules could benefit with Postee adoption even further. A few ideas that we've experimented in some of our other projects are as follows:</p> <ol> <li>Golang Policies</li> <li>CEL-Go</li> </ol>"},{"location":"improvements/#support-for-more-actions","title":"Support for more Actions","text":"<p>Today Postee supports a wide variety of Postee Actions but the list can be further expanded by including the following:</p> <ol> <li>AWS Cloudwatch Logs</li> <li>Azure automation</li> <li>GCP automation</li> </ol> <p>Extending Postee to support a new Action is very simple. You can take a look at this PR to see exactly which places you'll need to modify in order to support a new Action. </p> <p>Link to example PR</p>"},{"location":"improvements/#my-idea-is-not-listed-here","title":"My idea is not listed here","text":"<p>Do you have an idea that you'd like to implement in Postee? Reach out to us via GitHub Issues or on Slack to discuss more about it.</p>"},{"location":"install/","title":"Installation","text":"<p>To run Postee you will first need to configure the Postee Configuration File, which contains all the message routing logic. After the configuration file is ready, you can run the official Postee container image: khulnasoft/postee:latest, or compile it from source.</p> <p>There are different options to mount your customize configuration file to Postee - if running as a Docker container, then you simply mount the configuration files as a volume mount. If running as a Kubernetes deployment, you will need to mount it as a ConfigMap. See the below usage examples for how to run Postee on different scenarios.</p> <p>After Postee will run, it will expose two endpoints, HTTP and HTTPS. You can send your JSON messages to these endpoints, where they will be delivered to their target system based on the defined rules.</p>"},{"location":"install/#docker","title":"Docker","text":"<p>To run Postee as a Docker container, you mount the cfg.yaml to '/config/cfg.yaml' path in the Postee container.</p> <pre><code>docker run -d --name=postee -v /&lt;path to configuration file&gt;/cfg.yaml:/config/cfg.yaml \\\n    -e POSTEE_CFG=/config/cfg.yaml -e POSTEE_HTTP=0.0.0.0:8084 -e POSTEE_HTTPS=0.0.0.0:8444 \\\n    -p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre>"},{"location":"install/#kubernetes","title":"Kubernetes","text":"<p>When running Postee on Kubernetes, the configuration file is passed as a ConfigMap that is mounted to the Postee pod.</p>"},{"location":"install/#cloud-providers","title":"Cloud Providers","text":"<pre><code>kubectl create -f https://raw.githubusercontent.com/khulnasoft/postee/main/deploy/kubernetes/postee.yaml\n</code></pre>"},{"location":"install/#using-hostpath","title":"Using HostPath","text":"<pre><code>kubectl create -f https://raw.githubusercontent.com/khulnasoft/postee/main/deploy/kubernetes/hostPath/postee-pv.yaml\n</code></pre> <p>Persistent Volumes Explained</p> <ul> <li><code>postee-db</code>: persistent storage directory <code>/server/database</code></li> <li><code>postee-config</code>: mount the cfg.yaml to a writable directory <code>/config/cfg.yaml</code></li> <li><code>postee-rego-templates</code>: mount custom rego templates</li> <li><code>postee-rego-filters</code>: mount custom rego filters</li> </ul> <p>To edit the default Postee-UI user</p> <pre><code>kubectl -n postee set env deployment/my-posteeui -e POSTEE_ADMIN_USER=testabc -e POSTEE_ADMIN_PASSWORD=password\n</code></pre> <p>The Postee endpoints <pre><code>http://postee-svc.default.svc.cluster.local:8082\n</code></pre> <pre><code>https://postee-svc.default.svc.cluster.local:8445\n</code></pre></p> <p>The Postee-UI endpoint <pre><code>http://postee-ui-svc.default.svc.cluster.local:8000\n</code></pre></p>"},{"location":"install/#controllerrunner","title":"Controller/Runner","text":"<p>To use Controller/Runner functionality within Kubernetes, you can follow a reference manifest implementation: - Controller - Runner</p>"},{"location":"install/#helm","title":"Helm","text":"<p>When running Postee on Kubernetes, the configuration file is passed as a ConfigMap that is mounted to the Postee pod.</p> <p>This chart bootstraps a Postee deployment on a Kubernetes cluster using the Helm package manager.</p>"},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes 1.17+</li> <li>Helm 3+</li> </ul>"},{"location":"install/#test-the-chart-repository","title":"Test the Chart Repository","text":"<pre><code>cd deploy/helm\nhelm install my-postee -n postee --dry-run --set-file applicationConfigPath=\"../../cfg.yaml\" ./postee\n</code></pre>"},{"location":"install/#installing-the-chart-from-the-source-code","title":"Installing the Chart from the Source Code","text":"<pre><code>cd deploy/helm\nhelm install app --create-namespace -n postee ./postee\n</code></pre>"},{"location":"install/#installing-from-the-the-khulnasoft-chart-repository","title":"Installing from the the Khulnasoft Chart Repository","text":"<p>Let's add the Helm chart and deploy Postee executing:</p> <pre><code>helm repo add khulnasoft https://khulnasoft.github.io/helm-charts/\nhelm repo update\nhelm search repo postee\nhelm install app --create-namespace -n postee khulnasoft/postee\n</code></pre> <p>Check that all the pods are in Running state:</p> <p><code>kubectl get pods -n postee</code></p> <p>We check the logs:</p> <pre><code>kubectl logs deployment/my-posteeui -n postee | head\n</code></pre> <pre><code>kubectl logs statefulsets/my-postee -n postee | head\n</code></pre>"},{"location":"install/#delete-chart","title":"Delete Chart","text":"<pre><code>helm -n postee delete my-postee\n</code></pre>"},{"location":"install/#from-source","title":"From Source","text":"<p>Clone and build the project: <pre><code>git clone git@github.com:khulnasoft/postee.git\nmake build\n</code></pre> After that, modify the cfg.yaml file and set the 'POSTEE_CFG' environment variable to point to it. <pre><code>export POSTEE_CFG=&lt;path to cfg.yaml&gt;\n./bin/postee\n</code></pre></p>"},{"location":"khulnasoftcloud/","title":"Khulnasoft Cloud","text":""},{"location":"khulnasoftcloud/#configure-the-khulnasoft-server-with-webhook-integration","title":"Configure the Khulnasoft Server with Webhook Integration","text":"<p>Postee can be integrated with Khulnasoft Console to deliver vulnerability and audit messages to target systems.</p> <p>You can configure the Khulnasoft Server to send a Webhook notification whenever a new vulnerability is found. Navigate to the Image Scan Results Webhook page, under the \"Settings\" menu.</p> <p></p> <p>Click \"Enable sending image scan results to webhook\", and specify the URL of Postee. Now, scan an image and look at the Postee log files - you will see that Postee have received an incoming message once scan is done, and that the message was routed based on the cfg.yaml configuration.</p> <p>You can also configure the Khulnasoft Server to send a Webhook notification for every audit message. Navigate to the Log Management page, under the \"Integrations\" menu.</p> <p></p> <p>Click on the \"Webhook\" item, and specify the URL of Postee.</p> <p>Now every audit event in Khulnasoft will be sent to Postee. You can configure routes and input message conditions in Postee cfg.yaml to forward appropriate messages to target systems.</p> <p>The Postee URL is in the following formats:</p> <p><code>https://&lt;Postee IP or DNS&gt;:8445</code> <code>http://&lt;Postee IP or DNS&gt;:8082</code></p> <p>Tip</p> <pre><code>For more details about the Postee URL installed using kubernetes [click here](./deploy/kubernetes/README.md)\n</code></pre>"},{"location":"khulnasoftcloud/#validate-the-integration","title":"Validate the Integration","text":"<p>To validate that the integration is working, you can scan a new image for security vulnerabilities from the Khulnasoft Server UI (Images &gt; Add Image &gt; Specify Image Name &gt; Add).</p> <p>When vulnerabilities are found in an image, you will see that a JIRA ticket is created/ Email is received/ Slack message is posted to the channel.</p> <p>Tip</p> <pre><code>To troubleshoot the integration, you can look at both the Khulnasoft Postee container logs and the Khulnasoft Server logs. Use the \"docker logs &lt;container name&gt;\" command to view these logs.*\n</code></pre>"},{"location":"routes/","title":"Routes","text":"<p>A route is used to control message flows. Each route includes the input message condition, the template that should be used to format the message, and the action(s) that the message should be delivered to.</p> <p>The most important part of a route is the input definition using the Rego language to define what are the conditions for an incoming message to be handled by a certain route.</p> <p></p> <p>Tip</p> <p>See the complete Rego Language in OPA-reference</p> <p>After defining the route's input condition, what is left is to define the template that will be used to format the input message, and the action that formatted message will be sent to.</p> <p>The below table describes the fields to define a route:</p> Key Description Possible Values Example name Unique name of route string teams-vul-route input A Rego rule to match against incoming messages. If there is a match then this route will be chosen for the incoming message Rego language statements contains(input.message,\"alpine\") input-files One or more files with Rego rules Set of Rego language files [\"Policy-Registry.rego\", \"Policy-Min-Vulnerability.rego\"] actions One or more actions that are defined in the \"actions\" section Set of action names. At least one element is required [\"my-slack\", \"my-email\"]. serialize-actions Serialize the list of actions true, false(default) true template A template that is defined in the \"template\" section any template name raw-html <p>The <code>rego-filters</code> folder contains examples of policy related functions. You can use the examples. To do this, you need to change the input data in the arrays of rego files and fill in the config file. If you want to use an other folder, set the 'REGO_FILTERS_PATH' environment variable to point to it. When using 2 or more files, they will be combined by \"OR\". To combine policy related functions by \"AND\", use the <code>Policy-Related-Features.rego</code> file, change the input data, and fill in the required function in allow. <pre><code>allow{\n    PermitImageNames\n    PermitMinVulnerability\n}\n</code></pre> If you are using your own rego files, then the package field should be \"postee\" and the result should be in the  allow function: <pre><code>package postee\n\nyour_function{...} # 0 or more your functions\n\nallow {\n    your_function\n}\n</code></pre> For example, the following input definition will match JSON messages that have 'image.name' field with value that contains the string 'alpine':</p> <pre><code>input: contains(input.image,\"alpine\")\n</code></pre> <p>Another example using regular expression: <pre><code>input: regex.match(\"alp:*\", input.image)\n</code></pre></p> <p>You can create more complex input definitions using the Rego language. For example, the following input definition will match JSON messages that have 'image.name' field with value 'alpine' and that their registry is 'Docker Hub' and they have a critical vulnerability.</p> <pre><code>input: |\n  contains(input.image,\"alpine\")\n  contains(input.registry, \"Docker Hub\")\n  input.vulnerability_summary.critical&gt;0\n</code></pre>"},{"location":"routes/#postee-route-configuration","title":"Postee Route Configuration","text":"<p>You could use Postee with any json. See the following example receiving json events:</p>"},{"location":"routes/#route-all-messages","title":"Route All Messages","text":"<p>To create a route that matches all messages, simply use the following:</p> <pre><code>routes:\n- name: catch-all\n  input: input\n  ...\n</code></pre>"},{"location":"routes/#route-drift-prevention-messages","title":"Route Drift Prevention Messages","text":"<p>To create a route that matches only messages that originated from a \"Drift Prevention\" event, use the following:</p> <pre><code>routes:\n- name: catch-drift\n  input: contains(input.control, \"Drift\")\n  ...\n</code></pre>"},{"location":"routes/#route-tracee-message","title":"Route Tracee Message","text":"<p>The following input JSON message is from Tracee.</p> <p>Set <code>input</code> property of route to: <code>contains(input.SigMetadata.ID,\"TRC-\")</code> to limit the route to handle Tracee messages only</p> <p>In the section rego-templates have rego templates samples to use with Tracee: - tracee-html.rego - tracee-slack.rego</p>"},{"location":"routes/#plugins","title":"Plugins","text":"<p>'Plugins' section contains configuration for useful Postee features.</p> Key Description Possible Values Example aggregate-message-number Number of messages to aggregate into one message. any integer value 10 aggregate-message-timeout number of seconds, minutes, hours to aggregate Maximum is 24 hours Xs or Xm or Xh 1h unique-message-props Optional. Comma separated list of properties which uniquely identifies an event message. If message with same property values is received more than once, consequitive messages will be ignored. Array of properties that their value uniquely identifies a message To avoid duplicate scanning messages you can use the following properties: <code>unique-message-props: [\"digest\",\"image\",\"registry\", \"vulnerability_summary.high\", \"vulnerability_summary.medium\", \"vulnerability_summary.low\"]</code> unique-message-timeout Optional. Used along with unique-message-props, has no effect if unique props are not specified. Number of seconds/minutes/hours/days before expiring of a message. Expired messages are removed from db. If option is empty message is never deleted 1d"},{"location":"settings/","title":"General","text":"<p>General settings are specified at the root level of cfg.yaml. They include general configuration that applies to the Postee application.</p> <p></p> Key Description Possible Values Example Value khulnasoft-server Khulnasoft Platform URL. This is used for some of the integrations to will include a link to the Khulnasoft UI Khulnasoft Platform valid URL https://server.my.khulnasoft db-verify-interval Specify time interval (in hours) for Postee to perform database cleanup jobs. Default: 1 hour any integer value 1 max-db-size The maximum size of Postee database (in B, KB, MB or GB). Once reached to size limit, Postee will delete old cached messages. If empty then Postee database will have unlimited size any integer value with a unit siffux 200kb, 1000 MB, 1Gb"},{"location":"templates/","title":"Templates","text":"<p>Templates are used to format input messages before sending them to the action. For example - before sending a message to Microsoft Teams there is a need to format the input JSON into an HTML. This is done using a template.</p> <p>Each template has a <code>name</code> field, which is used by the route to assign the template to input and output.</p> <p>Tip</p> <p>Use the default Legacy template \"html\" for general output</p> <p></p> <p>In addition to name, a template will have one of the 4 below keys:</p> Key Description Example rego-package Postee loads bundle of templates from <code>rego-templates</code> folder. This folder includes several templates shipped with Postee, which can be used out of the box. You can add additional custom templates by placing Rego file under the 'rego-templates' directory. <code>postee.vuls.html</code> body Specify inline template. Relative small templates can be added to config directly input url Load from url. Rego template can be loaded from url. http://myserver.com/rego.txt legacy-scan-renderer Legacy templates are introduced to support Postee V1 renderers. Available values are  \"jira\", \"slack\", \"html\". \"jira\" should be used for jira integration, \"slack\" is for slack and \"html\" is for everything else. html <p>Tip</p> <p>Pre made examples for templates can be found here</p>"},{"location":"templates/#customizing-templates","title":"Customizing Templates","text":"<p>It is possible to customize templates and even write new ones from scratch. Follow the guide in our advanced section here: Customizing Templates</p>"},{"location":"templates/#troubleshooting-of-rego-templates","title":"Troubleshooting of Rego Templates","text":"<p>Rego templates provide very flexible way for transformation of received json. You can convert received information to html or json. On the flip side sometimes it may be difficult to find root cause of issue (if you run into any while configuring custom template). Postee application doesn't have many options to provide detailed error message. Very often if something goes wrong then 'result' property is omitted from rego evaluation result and it causes errors like: <pre><code>2021/07/23 18:27:31 Error while evaluating input: property result is not found\n</code></pre> So here are details to help with troubleshooting:</p>"},{"location":"templates/#required-tools","title":"Required tools","text":"<ul> <li>opa - tool to evaluate OPA queries directly</li> <li>jq - flexible command-line JSON processor.</li> </ul>"},{"location":"templates/#evaluate-template-to-build-html","title":"Evaluate template to build html","text":"<p>Here is example of command to evaluate rego: <pre><code>opa eval data.postee.vuls.html.result --data vuls-html.rego --data common/common.rego --input &lt;path to input json&gt; | jq -r .result[0].expressions[0].value\n</code></pre> The example above should be started in <code>rego-templates</code> folder and evaluates default html template shipped with postee. First opa argument is query. Three parts are used to build query <code>data</code>.<code>&lt;your rego package&gt;</code>.<code>result</code>. You may want to evaluate title property. In this case query would be: <code>data</code>.<code>&lt;your rego package&gt;</code>.<code>title</code></p>"},{"location":"templates/#evaluate-template-to-build-json","title":"Evaluate template to build json","text":"<pre><code>cd rego-templates\nopa eval data.postee.vuls.slack.result --data vuls-slack.rego --data common/common.rego --input &lt;path to input json&gt; | jq .result[0].expressions[0].value\n</code></pre> <p>The command above is similar to html case but <code>jq</code> is used a bit different way.</p>"},{"location":"ui/","title":"Postee UI","text":"<p>Postee provides a simple Web UI to simplify the configuration management.</p> <p></p>"},{"location":"ui/#configure-and-run-postee-ui-application","title":"Configure and run Postee UI application","text":""},{"location":"ui/#requirements","title":"Requirements","text":"<p>Postee Admin application shares location of <code>cfg.yaml</code> with main webhook app, also Bolt database needs to be in folder which is available for both apps.</p> <p>Danger</p> <pre><code>If application config is submitted by UI app then all yaml comments are removed. So if comments are important please make backup of config yaml.\n</code></pre>"},{"location":"ui/#kubernetes-for-postee-ui-application","title":"Kubernetes for Postee UI application","text":"<p>The manifest is here.</p> <p>It will expose a service <code>postee-ui-svc</code> in the port <code>8000</code>.</p> <p><code>http://postee-ui.default.svc.cluster.local:8000</code></p>"},{"location":"ui/#docker-image-for-postee-ui-application","title":"Docker Image for Postee UI application","text":"<p>Dockerfile to build image for UI app is here</p>"},{"location":"ui/#orchestration-example-docker-compose","title":"Orchestration example (Docker Compose)","text":"<p>There is an example of docker-compose.yml that can be used to simplify deploying of both app. Notice that two shared volumes are used. One is for Bolt db and second to store app config. To start apps use: <code>docker-compose up</code>.</p>"},{"location":"ui/#environment-variables","title":"Environment variables","text":"Name Description Default value POSTEE_UI_CFG Path to app config required, no default value POSTEE_UI_PORT Port to use with UI app 8090 POSTEE_UI_UPDATE_URL Url of webhook application required POSTEE_ADMIN_USER Admin account name admin POSTEE_ADMIN_PASSWORD Admin account password admin"},{"location":"actions/actions/","title":"Postee Actions","text":""},{"location":"actions/actions/#motivation","title":"Motivation","text":"<p>Proper alert management can help security practitioners make informed decisions about their codebase. However, security alerts can cause fatigue if acting on them isn\u2019t possible. Postee, an open source security alert management tool, helps mitigate some of those concerns. It enables teams to define routes and rules by which alerts are handled and redirected to </p>"},{"location":"actions/actions/#user-stories","title":"User Stories","text":"<p>In a typical Postee setup, users can configure the tool to receive events from a variety of sources over a webhook. This allows for ease of use in existing environments. Furthermore, users can configure Postee to process these incoming events and, based on logic defined via Rego rules, send them to different actions.</p> <p>As a, Postee User - I want, to be able to remove a vulnerable image from my cluster upon a Trivy scan So that, I can keep such images unavailable for deployment.</p> <ul> <li> <p>I want, to ship Tracee security notification logs from my node when events are detected  So that, I can build a timelog for forensics purposes.</p> </li> <li> <p>I want, to be able to add labels to my deployments when Starboard detects a vulnerable image in my cluster  So that, I can effectively tag my resources.</p> </li> </ul>"},{"location":"actions/actions/#configuring-postee-actions","title":"Configuring Postee Actions","text":"<p>In this README, we\u2019ll walk through a scenario in which a user wants to act on a security event received from Tracee, an open source runtime security tool. In this scenario, the user will set up the Postee Exec Action to save logs for forensic purposes and then use the Postee HTTP Action to ship the saved logs to a remote server.</p> <p>In this case, the incoming security event from Tracee is received by Postee and evaluated by the following route YAML definition: </p> <p></p> <p>As seen above, the route has a Rego rule that evaluates the input to contain a certain signature ID, TRC-2, which represents anti-debugging activity. In addition, if the input is matched, the output is triggered.</p>"},{"location":"actions/actions/#exec-action","title":"Exec Action","text":"<p>In this case, we call the Exec Action first and then the HTTP Action. They are defined as the following:</p> <p>The Exec Action can take in the following parameters:</p> Option Usage env Optional, custom environment variables to be exposed in the shell of the executing script input-file Required, custom shell script to executed exec-script Required, inline shell script executed <p>The Exec Action also internally exposes the <code>$POSTEE_EVENT</code> environment variable with the input event that triggered the action. This can be helpful in situations where the event itself contains useful information.</p> <p>Below is an example of using <code>$POSTEE_EVENT</code>. It uses the inline exec-script script:</p> <p></p> <p>As you can see, we capture the incoming Postee event and write this event to the Tracee event log for forensic purposes.</p>"},{"location":"actions/actions/#http-action","title":"HTTP Action","text":"<p>Finally, we can configure the Postee HTTP Post Action to ship the captured event logs via our HTTP Action to our remote server.</p> <p></p> Option Usage URL Required, URL of the remote server Method Required, e.g., GET, POST Headers Optional, custom headers to send Timeout Optional, custom timeout for HTTP call Bodyfile Optional, input file for HTTP post body <p>To run Postee in the container, we can invoke the Postee Docker container:</p> <pre><code>docker run --rm --name=postee \\\n-v &lt;path-to-cfg&gt;:/config/cfg-actions.yaml  \\\n-e POSTEE_CFG=/config/cfg-actions.yaml \\\n-e POSTEE_HTTP=0.0.0.0:8084  \\\n-e POSTEE_HTTPS=0.0.0.0:8444  \\\n-p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre>"},{"location":"actions/actions/#kubernetes-action","title":"Kubernetes Action","text":"<p>In addition to the Exec and HTTP actions, we have also implemented a Kubernetes action that today can add labels and annotations to pods. It can be used as follows:</p> <p></p> Option Usage kube-namespace Required. Kubernetes namespace to use. kube-config-file Required. Path to .kubeconfig file kube-label-selector Required, if specifying labels or annotations. kube-actions Optional, key-value pair of labels and annotationsLabels must be added via \"labels\" key and Annotations via \"annotations\"."},{"location":"actions/actions/#docker-action","title":"Docker Action","text":"<p>We have also added a Docker Action, that can help you run docker images as an action within a container.</p> <p></p> Option Usage docker-image-name Required. Image name of the docker image. docker-cmd Required. Command to run inside the docker image. docker-env Optional. Environment variables to set in the container. docker-network Optional. Connect the action container to the specified network. docker-volume-mounts Optional*. Volume mounts present inside the container. * If you have specified volume mounts, you also need to pass them through into the postee docker container"},{"location":"actions/actions/#note","title":"Note","text":"<p>When running Postee in a Docker container, it is required to mount the Docker socket within the Postee container to be able to spin up Docker Action container instances. This can be done as follows: <pre><code>docker run --rm --name=postee --group-add $(stat -c '%g' /var/run/docker.sock) -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/cfg.yaml:/config/cfg.yaml  -e POSTEE_CFG=/config/cfg.yaml -e POSTEE_HTTP=0.0.0.0:8084     -e POSTEE_HTTPS=0.0.0.0:8444     -p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre></p> <p>If you have specified volume mounts for a docker container and use Postee in a docker container as well, remember to mount them within the Postee container as well: <pre><code>docker run --rm --name=postee --group-add $(stat -c '%g' /var/run/docker.sock) -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/cfg.yaml:/config/cfg.yaml  -v /my/custom/volume:/my/custom/volume -e POSTEE_CFG=/config/cfg.yaml -e POSTEE_HTTP=0.0.0.0:8084     -e POSTEE_HTTPS=0.0.0.0:8444     -p 8084:8084 -p 8444:8444 khulnasoft/postee:latest\n</code></pre></p>"},{"location":"blueprints/devops-pagerduty/","title":"Paging DevOps Teams","text":""},{"location":"blueprints/devops-pagerduty/#introduction","title":"Introduction","text":"<p>In this walkthrough, we will setup vulnerability scanning with Trivy and send the results to Postee for paging DevOps team members for critical vulnerabilities as they are introduced.</p>"},{"location":"blueprints/devops-pagerduty/#scenario","title":"Scenario","text":"<p>A DevOps team would like to configure alerts for scheduled vulnerability scans to notify them about any vulnerable images that they might be running in their clusters. For this they decide to install Trivy, run it on a schedule and send the results to Postee.</p> <p>They decide to configure Postee so that upon receiving such alerts, Postee sends an event to PagerDuty which fires off an alert to inform DevOps teams to take necessary action. </p> <p></p>"},{"location":"blueprints/devops-pagerduty/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/devops-pagerduty/#postee-config","title":"Postee Config","text":"<pre><code>routes:\n- name: Trivy Alerts to Pagerduty\n  input: input.report.summary.criticalCount &gt; 0\n  actions: [alert-devops]\n  template: trivy-raw-json\n\n# Templates are used to format a message\ntemplates:\n- name: trivy-raw-json\n  rego-package: postee.rawmessage.json\n\n# Actions are target services that should consume the messages\nactions:\n- name: alert-devops\n  type: pagerduty\n  enable: true\n  pagerduty-auth-token: \"&lt;auth token&gt;\"\n  pagerduty-routing-key: \"&lt;routing key&gt;\"\n</code></pre>"},{"location":"blueprints/external-healthcheck/","title":"Distributed Service Healthcheck","text":""},{"location":"blueprints/external-healthcheck/#introduction","title":"Introduction","text":"<p>In this walkthrough, we will setup a globally distributed healthcheck for a service that we expect to be accessible from anywhere. This walkthrough will combine Postee Actions and AWS Lambda to accomplish this.</p>"},{"location":"blueprints/external-healthcheck/#scenario","title":"Scenario","text":"<p>A DevOps operator gets paged about a service that they maintain. This page turns out to be flaky and non-actionable. </p> <p>In order to avoid operator fatigue, we can confirm the correctness of the page by triggering several healthchecks upon the notification of such an event. These healthchecks are performed externally via Lambda functions spread across different regions. </p> <p>By performing such globally distributed checks, the operator can be rest assured of the accuracy of any failures and in addition narrow out the scope of the problem.</p> <p></p>"},{"location":"blueprints/external-healthcheck/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/external-healthcheck/#postee-config","title":"Postee Config","text":"<p>Postee Actions dispatches calls via the HTTP Action to 3 different AWS Lambda URLs. These requests are performed in parallel. In addition, the operator is performed of the trigger and notified via a Slack message.</p> <pre><code>routes:\n- name: actions-route\n  input: contains(input.ServiceURL.Reachable, \"false\")\n  actions: [send-slack-message, eu-check, apac-check, na-check]\n\n# Outputs are target services that should consume the messages\nactions:\n- name: send-slack-messsage\n  type: slack\n  enable: true\n  url: https://hooks.slack.com/services/TAAAA/BBB/&lt;key&gt;\n\n- name: eu-check\n  type: http\n  enable: true\n  url: \"https://&lt;uuid-func&gt;.lambda-url.&lt;aws-region&gt;.on.aws/\"\n  method: POST\n\n- name: apac-check\n  type: http\n  enable: true\n  url: \"https://&lt;uuid-func&gt;.lambda-url.&lt;aws-region&gt;.on.aws/\"\n  method: POST\n\n- name: na-check\n  type: http\n  enable: true\n  url: \"https://&lt;uuid-func&gt;.lambda-url.&lt;aws-region&gt;.on.aws/\"\n  method: POST\n</code></pre>"},{"location":"blueprints/external-healthcheck/#lambda-config","title":"Lambda Config","text":"<pre><code>import os\nfrom datetime import datetime\nfrom urllib.request import Request, urlopen\n\nSITE = \"https://www.my-highly-available-website.com\"\nEXPECTED = \"Text I expect to find\"\n\ndef validate(res):\n    return EXPECTED in res\n\n\ndef lambda_handler(event, context):\n    timeNow = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n    print('Checking {} at {}...'.format(SITE, timeNow))\n    try:\n        req = Request(SITE, headers={'User-Agent': 'AWS Lambda'})\n        if not validate(str(urlopen(req).read())):\n            raise Exception('Validation failed')\n    except:\n        print('Check failed!')\n        raise\n    else:\n        print('Check passed!')\n        return ('khulnasoft.com is up! at {}'.format(timeNow))\n    finally:\n        print('Check complete at {}'.format(str(datetime.now())))\n</code></pre> <p>Inspired by: https://github.com/amazon-archives/serverless-app-examples/blob/master/python/lambda-canary/lambda_function.py </p>"},{"location":"blueprints/image-processing/","title":"Doing Serverless Image Recognition using Postee Actions and AWS","text":""},{"location":"blueprints/image-processing/#introduction","title":"Introduction","text":"<p>In this walkthrough, we will setup Postee Actions by re-using existing AWS Lambda Functions. This will allow anyone to configure and re-use existing AWS Lambda functionality as a Postee Action.</p>"},{"location":"blueprints/image-processing/#scenario","title":"Scenario","text":"<p>A user wants to be able to setup image processing of captured images in order to be able to identify any suspicious activity captured by the security (CCTV) camera.</p> <p>Upon successful identification, the user should be informed of such an event.</p> <p></p>"},{"location":"blueprints/image-processing/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/image-processing/#postee-config","title":"Postee Config","text":"<pre><code>routes:\n- name: actions-route\n  input: contains(input.Camera.Event, \"Finding\")\n  serialize-actions: true\n  actions: [send-slack-message, process-image]\n\n# Outputs are target services that should consume the messages\nactions:\n- name: send-slack-messsage\n  type: slack\n  enable: true \n  url: https://hooks.slack.com/services/TAAAA/BBB/&lt;key&gt;\n\n- name: process-image\n  type: http\n  enable: true\n  url: \"https://&lt;uuid-func&gt;.lambda-url.&lt;aws-region&gt;.on.aws/\"\n  method: POST\n</code></pre>"},{"location":"blueprints/image-processing/#aws-rekognition-lambda-config","title":"AWS Rekognition &amp; Lambda Config","text":"<p>The full source code is omitted here for brevity but this example was inspired by: https://docs.aws.amazon.com/code-samples/latest/catalog/python-rekognition-rekognition_video_detection.py.html</p> <p>In order to setup the Lambda function we will need a handler that can process the incoming event from Postee. The below example demonstrates via Python psuedocode what this Lambda Handler could look like. <pre><code>import boto3\nfrom rekognition_objects import (\n    RekognitionFace, RekognitionVideo\n)\n\ndef do_face_detection(self):\n    return self._do_rekognition_job(\n        \"face detection\",\n        self.rekognition_client.start_face_detection,\n        self.rekognition_client.get_face_detection,\n        lambda response: [\n            RekognitionFace(face['Face'], face['Timestamp']) for face in\n            response['Faces']])\n\ndef lambda_handler(event, context):\n    rekognition_client = boto3.client('rekognition')\n    video = RekognitionVideo.from_event(event, rekognition_client)\n    faces = video.do_face_detection()\n    return faces\n</code></pre></p>"},{"location":"blueprints/trivy-aws-security-hub/","title":"Trivy AWS CSPM Scanning","text":""},{"location":"blueprints/trivy-aws-security-hub/#introduction","title":"Introduction","text":"<p>In this walkthrough, we will setup AWS Cloud Scanning with Trivy and send the results to Postee, which in turn will send the results to AWS Security Hub, a CSPM product by AWS.</p>"},{"location":"blueprints/trivy-aws-security-hub/#scenario","title":"Scenario","text":"<p>A DevOps team would like to configure alerts for their Cloud Security Posture in order to know if they are following the best security practices. This is especially important in those scenarios where compliance can fall out of place during active usage. For this they decide to install Trivy, and use the AWS Scanning feature to send the results to Postee.</p> <p>They decide to configure Postee so that upon receiving such alerts, Postee can action upon them as desired but also report them upstream to the AWS Security Hub for further analysis and triage.</p> <p></p>"},{"location":"blueprints/trivy-aws-security-hub/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/trivy-aws-security-hub/#postee-config","title":"Postee Config","text":"<p>Postee Actions dispatches calls via the HTTP Action to 3 different AWS Lambda URLs. These requests are performed in parallel. In addition, the operator is performed of the trigger and notified via a Slack message.</p> <pre><code>actions:\n- type: awssecurityhub\n  enable: true\n  name: Send Findings to Security Hub\nroutes:\n- name: Send Trivy Findings to AWS Security Hub\n  template: raw-json\n  actions:\n  - Send Findings to Security Hub\n  input-files:\n  - Trivy AWS Findings\ntemplates:\n- name: raw-json\n  rego-package: postee.rawmessage.json\nrules:\n- name: Trivy AWS Findings\nname: Send Trivy Results to AWS Security Hub\n</code></pre> <p>Note</p> <p>Currently Postee AWS Security Hub configuration only supports reading AWS Credentials from the AWS config file present on disk.</p>"},{"location":"blueprints/trivy-aws-security-hub/#aws-security-hub-configuration","title":"AWS Security Hub configuration","text":"<p>AWS Security Hub can be configured using the instructions as defined here</p> <p>Tip</p> <p>AWS Security Hub only accepts Trivy findings from the AWS account that is associated with the findings. The identifier of the associated account is the value of the AwsAccountId attribute for the finding.</p>"},{"location":"blueprints/trivy-aws-security-hub/#trivy-webhook-plugin","title":"Trivy Webhook Plugin","text":"<p>Trivy Webhook Plugin is a Trivy plugin that lets you send Trivy scan results to a webhook listening on an endpoint. In this case we can make use of it as follows:</p>"},{"location":"blueprints/trivy-aws-security-hub/#install-the-plugin","title":"Install the plugin","text":"<pre><code>trivy plugin install github.com/aquasecurity/trivy-plugin-webhook\n</code></pre>"},{"location":"blueprints/trivy-aws-security-hub/#run-the-trivy-scan-using-the-plugin","title":"Run the Trivy scan using the plugin","text":"<pre><code>trivy webhook -- --url=&lt;postee-endpoint&gt; -- &lt;trivy args&gt;\n</code></pre>"},{"location":"blueprints/trivy-operator/","title":"Trivy Operator","text":""},{"location":"blueprints/trivy-operator/#introduction","title":"Introduction","text":"<p>In this walk through, configure Trivy Operator, a Kubernetes native security toolkit that helps security practitioners detect vulnerabilities, secrets and other misconfigurations in their Kubernetes clusters. We will configure Trivy Operator to send the generated reports to Postee, whereby Postee can take necessary actions on the incoming reports for example, removing vulnerable images.</p>"},{"location":"blueprints/trivy-operator/#scenario","title":"Scenario","text":"<p>A DevOps team would like to configure alerts for their Kubernetes cluster to observe any security vulnerabilities or secrets getting exposed during deployments. This is especially important in those scenarios where compliance can fall out of place during active usage. For this they decide to install Trivy Operator, and use the Webhook integration to send the reports to Postee.</p> <p>They decide to configure Postee so that upon receiving such reports, Postee can action upon them as desired, which could include taking actions such as sending alerts to operators, creating JIRA tickets etc.</p> <p></p>"},{"location":"blueprints/trivy-operator/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/trivy-operator/#postee-config","title":"Postee Config","text":"<pre><code>routes:\n- name: Trivy Operator Alerts\n  input: input.report.summary.criticalCount &gt; 0 # You can customize this based on your needs\n  actions: [send-slack-msg]\n  template: trivy-operator-slack\n\n# Templates are used to format a message\ntemplates:\n- name: trivy-operator-slack\n  rego-package: postee.trivyoperator.slack\n\n# Actions are target services that should consume the messages\nactions:\n- name: send-slack-msg\n  type: slack\n  enable: true\n  url: &lt;slack webhook url&gt;\n</code></pre> <p>If all goes well, you should see a report in your Slack channel next time it is generated. </p>"},{"location":"blueprints/trivy-vulnerability-scan/","title":"Trivy Vulnerability Scan","text":""},{"location":"blueprints/trivy-vulnerability-scan/#introduction","title":"Introduction","text":"<p>In this walkthrough, we will setup vulnerability scanning with Trivy and send the results to Postee for creation of JIRA tickets as an example.</p> <p>A video format of this guide is also available here.</p>"},{"location":"blueprints/trivy-vulnerability-scan/#scenario","title":"Scenario","text":"<p>A DevOps team would like to configure alerts for scheduled vulnerability scans to notify them about any vulnerable images that they might be running in their clusters. For this they decide to install Trivy, run it on a schedule and send the results to Postee.</p> <p>They decide to configure Postee so that upon receiving such alerts, Postee creates a JIRA ticket for them to take a look at it at their disposal.</p> <p></p>"},{"location":"blueprints/trivy-vulnerability-scan/#sample-configs","title":"Sample Configs","text":"<p>In this case a sample configuration for the components can be described as follows:</p>"},{"location":"blueprints/trivy-vulnerability-scan/#postee-config","title":"Postee Config","text":"<pre><code>routes:\n- name: trivy-alpine-vulns\n  input: contains(input.Metadata.OS.Family, \"alpine\")\n  actions: [my-jira]\n  template: trivy-raw-json\n\n# Templates are used to format a message\ntemplates:\n- name: trivy-raw-json\n  rego-package: postee.rawmessage.json\n\n# Actions are target services that should consume the messages\nactions:\n- name: my-jira\n  type: jira\n  enable: true\n  url: \"https://foo.bar.com\"\n  user: \"jdoe@foo.bar.com\"\n  password: \"hunter2\"\n  project-key:   \"ABC\"\n  board:     \"Backlog\"\n  labels:    [\"trivy-vulns\"]\n</code></pre>"},{"location":"blueprints/trivy-vulnerability-scan/#trivy-webhook-plugin","title":"Trivy Webhook Plugin","text":"<p>Trivy Webhook Plugin is a Trivy plugin that lets you send Trivy scan results to a webhook listening on an endpoint. In this case we can make use of it as follows:</p>"},{"location":"blueprints/trivy-vulnerability-scan/#install-the-plugin","title":"Install the plugin","text":"<pre><code>trivy plugin install https://github.com/aquasecurity/trivy-plugin-webhook\n</code></pre>"},{"location":"blueprints/trivy-vulnerability-scan/#run-the-trivy-scan-using-the-plugin","title":"Run the Trivy scan using the plugin","text":"<pre><code>trivy webhook -- --url=&lt;postee-endpoint&gt; -- &lt;trivy args&gt;\n</code></pre>"}]}